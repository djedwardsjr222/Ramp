{"ast":null,"code":"var _jsxFileName = \"/Users/DJ 1/Downloads/ramp-fe-challenge/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [filteredTransactions, setFilteredTransactions] = useState(null);\n  const transactions = useMemo(() => {\n    var _ref, _ref2;\n\n    return (_ref = (_ref2 = filteredTransactions !== null && filteredTransactions !== void 0 ? filteredTransactions : paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _ref2 !== void 0 ? _ref2 : transactionsByEmployee) !== null && _ref !== void 0 ? _ref : null;\n  }, [filteredTransactions, paginatedTransactions, transactionsByEmployee]);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n    await employeeUtils.fetchAll();\n    const newPaginatedTransactions = await paginatedTransactionsUtils.fetchAll();\n    setFilteredTransactions(null); // Reset filtered transactions when loading all transactions\n\n    setIsLoading(false);\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    paginatedTransactionsUtils.invalidateData();\n    await transactionsByEmployeeUtils.fetchById(employeeId);\n    setFilteredTransactions(null); // Reset filtered transactions when loading transactions by employee\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  const handleToggleTransaction = useCallback(transactionId => {\n    setFilteredTransactions(prevTransactions => {\n      if (!prevTransactions) return null;\n      return prevTransactions.map(transaction => {\n        if (transaction.id === transactionId) {\n          return { ...transaction,\n            approved: !transaction.approved\n          };\n        }\n\n        return transaction;\n      });\n    });\n  }, []);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  const hasNextPage = (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) !== null;\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue === null) {\n            return;\n          }\n\n          if (newValue === EMPTY_EMPLOYEE) {\n            await loadAllTransactions();\n          } else {\n            await loadTransactionsByEmployee(newValue.id);\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: transactions !== null && hasNextPage && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading,\n          onClick: async () => {\n            await paginatedTransactionsUtils.fetchAll();\n          },\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"Das8DVV1WhLG7LHlNwU4wp/gjFc=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","filteredTransactions","setFilteredTransactions","transactions","loadAllTransactions","invalidateData","fetchAll","newPaginatedTransactions","loadTransactionsByEmployee","employeeId","fetchById","handleToggleTransaction","transactionId","prevTransactions","map","transaction","id","approved","loading","hasNextPage","nextPage","item","value","label","firstName","lastName","newValue"],"sources":["/Users/DJ 1/Downloads/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { Employee, Transaction } from \"./utils/types\";\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees();\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions();\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [filteredTransactions, setFilteredTransactions] = useState<Transaction[] | null>(null);\n\n  const transactions = useMemo(\n    () => filteredTransactions ?? paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n    [filteredTransactions, paginatedTransactions, transactionsByEmployee]\n  );\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n\n    await employeeUtils.fetchAll();\n    const newPaginatedTransactions = await paginatedTransactionsUtils.fetchAll();\n    setFilteredTransactions(null); // Reset filtered transactions when loading all transactions\n    setIsLoading(false);\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      paginatedTransactionsUtils.invalidateData();\n      await transactionsByEmployeeUtils.fetchById(employeeId);\n      setFilteredTransactions(null); // Reset filtered transactions when loading transactions by employee\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  );\n\n  const handleToggleTransaction = useCallback(\n    (transactionId: string) => {\n      setFilteredTransactions((prevTransactions) => {\n        if (!prevTransactions) return null;\n        return prevTransactions.map((transaction) => {\n          if (transaction.id === transactionId) {\n            return { ...transaction, approved: !transaction.approved };\n          }\n          return transaction;\n        });\n      });\n    },\n    []\n  );\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n\n  const hasNextPage = paginatedTransactions?.nextPage !== null;\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            if (newValue === null) {\n              return;\n            }\n\n            if (newValue === EMPTY_EMPLOYEE) {\n              await loadAllTransactions();\n            } else {\n              await loadTransactionsByEmployee(newValue.id);\n            }\n          }}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          {/* Pass onToggleTransaction to Transactions component */}\n          {/* <Transactions transactions={transactions} onToggleTransaction={handleToggleTransaction} /> */}\n\n          {transactions !== null && hasNextPage && (\n            <button\n              className=\"RampButton\"\n              disabled={paginatedTransactionsUtils.loading}\n              onClick={async () => {\n                await paginatedTransactionsUtils.fetchAll();\n              }}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}