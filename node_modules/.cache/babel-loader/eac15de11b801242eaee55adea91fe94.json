{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function useTransactionsByEmployee() {\n  _s();\n\n  const {\n    fetchWithCache\n  } = useCustomFetch();\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState(null);\n  const [loadingTransactionsByEmployee, setLoadingTransactionsByEmployee] = useState(false); // New loading state\n\n  const fetchById = useCallback(async employeeId => {\n    setLoadingTransactionsByEmployee(true); // Start loading transactions by employee\n\n    const data = await fetchWithCache(\"transactionsByEmployee\", {\n      employeeId\n    });\n    setTransactionsByEmployee(data);\n    setLoadingTransactionsByEmployee(false); // Stop loading transactions by employee after fetching data\n  }, [fetchWithCache]);\n  const invalidateData = useCallback(() => {\n    setTransactionsByEmployee(null);\n  }, []);\n  return {\n    data: transactionsByEmployee,\n    loading: loadingTransactionsByEmployee,\n    fetchById,\n    invalidateData\n  };\n}\n\n_s(useTransactionsByEmployee, \"LMaFdcudxFtor74mMOAn4Fh48OA=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","useTransactionsByEmployee","fetchWithCache","transactionsByEmployee","setTransactionsByEmployee","loadingTransactionsByEmployee","setLoadingTransactionsByEmployee","fetchById","employeeId","data","invalidateData","loading"],"sources":["/Users/DJ 1/Downloads/ramp-fe-challenge/src/hooks/useTransactionsByEmployee.ts"],"sourcesContent":["import { useCallback, useState } from \"react\";\nimport { RequestByEmployeeParams, Transaction } from \"../utils/types\";\nimport { TransactionsByEmployeeResult } from \"./types\";\nimport { useCustomFetch } from \"./useCustomFetch\";\n\nexport function useTransactionsByEmployee(): TransactionsByEmployeeResult {\n  const { fetchWithCache } = useCustomFetch();\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState<Transaction[] | null>(null);\n  const [loadingTransactionsByEmployee, setLoadingTransactionsByEmployee] = useState(false); // New loading state\n\n  const fetchById = useCallback(\n    async (employeeId: string) => {\n      setLoadingTransactionsByEmployee(true); // Start loading transactions by employee\n      const data = await fetchWithCache<Transaction[], RequestByEmployeeParams>(\n        \"transactionsByEmployee\",\n        {\n          employeeId,\n        }\n      );\n\n      setTransactionsByEmployee(data);\n      setLoadingTransactionsByEmployee(false); // Stop loading transactions by employee after fetching data\n    },\n    [fetchWithCache]\n  );\n\n  const invalidateData = useCallback(() => {\n    setTransactionsByEmployee(null);\n  }, []);\n\n  return { data: transactionsByEmployee, loading: loadingTransactionsByEmployee, fetchById, invalidateData };\n}"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,SAASC,yBAAT,GAAmE;EAAA;;EACxE,MAAM;IAAEC;EAAF,IAAqBF,cAAc,EAAzC;EACA,MAAM,CAACG,sBAAD,EAAyBC,yBAAzB,IAAsDL,QAAQ,CAAuB,IAAvB,CAApE;EACA,MAAM,CAACM,6BAAD,EAAgCC,gCAAhC,IAAoEP,QAAQ,CAAC,KAAD,CAAlF,CAHwE,CAGmB;;EAE3F,MAAMQ,SAAS,GAAGT,WAAW,CAC3B,MAAOU,UAAP,IAA8B;IAC5BF,gCAAgC,CAAC,IAAD,CAAhC,CAD4B,CACY;;IACxC,MAAMG,IAAI,GAAG,MAAMP,cAAc,CAC/B,wBAD+B,EAE/B;MACEM;IADF,CAF+B,CAAjC;IAOAJ,yBAAyB,CAACK,IAAD,CAAzB;IACAH,gCAAgC,CAAC,KAAD,CAAhC,CAV4B,CAUa;EAC1C,CAZ0B,EAa3B,CAACJ,cAAD,CAb2B,CAA7B;EAgBA,MAAMQ,cAAc,GAAGZ,WAAW,CAAC,MAAM;IACvCM,yBAAyB,CAAC,IAAD,CAAzB;EACD,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IAAEK,IAAI,EAAEN,sBAAR;IAAgCQ,OAAO,EAAEN,6BAAzC;IAAwEE,SAAxE;IAAmFG;EAAnF,CAAP;AACD;;GA1BeT,yB;UACaD,c"},"metadata":{},"sourceType":"module"}