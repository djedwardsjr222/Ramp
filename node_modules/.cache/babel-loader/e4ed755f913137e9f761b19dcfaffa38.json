{"ast":null,"code":"var _jsxFileName = \"/Users/DJ 1/Downloads/ramp-fe-challenge/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    loading: paginatedTransactionsLoading,\n    fetchAll: fetchPaginatedTransactions,\n    invalidateData: invalidatePaginatedTransactions\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [filteredTransactions, setFilteredTransactions] = useState(null);\n  const [page, setPage] = useState(0); // Track the page number separately\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n    await employeeUtils.fetchAll();\n    await fetchPaginatedTransactions();\n    setIsLoading(false);\n  }, [employeeUtils, fetchPaginatedTransactions, transactionsByEmployeeUtils]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    invalidatePaginatedTransactions();\n    await transactionsByEmployeeUtils.fetchById(employeeId); // Update filtered transactions state\n\n    setFilteredTransactions(transactionsByEmployee);\n  }, [invalidatePaginatedTransactions, transactionsByEmployeeUtils]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]); // Determine the transactions to be displayed based on the selected filter\n\n  const transactions = useMemo(() => {\n    var _paginatedTransaction;\n\n    if (filteredTransactions !== null) {\n      return filteredTransactions;\n    }\n\n    return (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : null;\n  }, [filteredTransactions, paginatedTransactions]); // Determine if there are more transactions to fetch\n\n  const hasMoreTransactions = useMemo(() => {\n    return (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) !== null;\n  }, [paginatedTransactions]);\n\n  const handleFetchMoreTransactions = async () => {\n    setIsLoading(true);\n    setPage(prevPage => prevPage + 1); // Update page number when fetching more transactions\n\n    await fetchPaginatedTransactions(); // Fetch the next page without passing any arguments\n\n    setIsLoading(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue === null) {\n            // Clear the filtered transactions when \"All Employees\" is selected\n            setFilteredTransactions(null);\n            return;\n          } // Load transactions for the selected employee\n\n\n          await loadTransactionsByEmployee(newValue.id);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), transactions !== null && filteredTransactions === null && hasMoreTransactions && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsLoading,\n          onClick: handleFetchMoreTransactions // Use the new handler for fetching more transactions\n          ,\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"kXXRZUKuso2lDpsrUIQQsdLmafI=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","employeeUtils","paginatedTransactions","loading","paginatedTransactionsLoading","fetchAll","fetchPaginatedTransactions","invalidateData","invalidatePaginatedTransactions","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","filteredTransactions","setFilteredTransactions","page","setPage","loadAllTransactions","loadTransactionsByEmployee","employeeId","fetchById","transactions","hasMoreTransactions","nextPage","handleFetchMoreTransactions","prevPage","item","value","id","label","firstName","lastName","newValue"],"sources":["/Users/DJ 1/Downloads/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { Employee, Transaction } from \"./utils/types\";\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    loading: paginatedTransactionsLoading,\n    fetchAll: fetchPaginatedTransactions,\n    invalidateData: invalidatePaginatedTransactions,\n  } = usePaginatedTransactions();\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [filteredTransactions, setFilteredTransactions] = useState<null | Transaction[]>(null);\n  const [page, setPage] = useState<number>(0); // Track the page number separately\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n\n    await employeeUtils.fetchAll();\n    await fetchPaginatedTransactions();\n\n    setIsLoading(false);\n  }, [employeeUtils, fetchPaginatedTransactions, transactionsByEmployeeUtils]);\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      invalidatePaginatedTransactions();\n      await transactionsByEmployeeUtils.fetchById(employeeId);\n\n      // Update filtered transactions state\n      setFilteredTransactions(transactionsByEmployee);\n    },\n    [invalidatePaginatedTransactions, transactionsByEmployeeUtils]\n  );\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n\n  // Determine the transactions to be displayed based on the selected filter\n  const transactions = useMemo(() => {\n    if (filteredTransactions !== null) {\n      return filteredTransactions;\n    }\n    return paginatedTransactions?.data ?? null;\n  }, [filteredTransactions, paginatedTransactions]);\n\n  // Determine if there are more transactions to fetch\n  const hasMoreTransactions = useMemo(() => {\n    return paginatedTransactions?.nextPage !== null;\n  }, [paginatedTransactions]);\n\n  const handleFetchMoreTransactions = async () => {\n    setIsLoading(true);\n    setPage((prevPage) => prevPage + 1); // Update page number when fetching more transactions\n    await fetchPaginatedTransactions(); // Fetch the next page without passing any arguments\n    setIsLoading(false);\n  };\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            if (newValue === null) {\n              // Clear the filtered transactions when \"All Employees\" is selected\n              setFilteredTransactions(null);\n              return;\n            }\n\n            // Load transactions for the selected employee\n            await loadTransactionsByEmployee(newValue.id);\n          }}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          <Transactions transactions={transactions} />\n\n          {transactions !== null && filteredTransactions === null && hasMoreTransactions && (\n            <button\n              className=\"RampButton\"\n              disabled={paginatedTransactionsLoading}\n              onClick={handleFetchMoreTransactions} // Use the new handler for fetching more transactions\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}